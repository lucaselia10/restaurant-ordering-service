@startuml
'https://plantuml.com/sequence-diagram

autonumber

actor "Client" as client
participant "API Gateway/Lambda" as apiGateway
participant "GetMenuActivity" as getMenuActivity
participant "MenuDao" as MenuDao
database "DynamoDB" as dynamoDB

title Get Menu for Customer

client -> apiGateway : HTTP Request
activate apiGateway

apiGateway -> getMenuActivity : GetMenuRequest
deactivate apiGateway

activate getMenuActivity
getMenuActivity -> MenuDao : getMenu
deactivate getMenuActivity

activate MenuDao
MenuDao -> dynamoDB : getMenu
deactivate MenuDao

activate dynamoDB
dynamoDB -> MenuDao : return menu data
deactivate dynamoDB

activate MenuDao
MenuDao -> getMenuActivity : Menu
deactivate MenuDao

activate getMenuActivity
getMenuActivity -> apiGateway : Menu
deactivate getMenuActivity

activate apiGateway
apiGateway -> client : Menu
deactivate apiGateway



'
'addSongActivity -> playlistDao : getPlayList(id)
'activate playlistDao
'
'playlistDao -> dynamoDB : lookup by playlist id
'activate dynamoDB
'
'alt if playlist does not exist
'dynamoDB --> playlistDao : return with no item data
'playlistDao --> addSongActivity: throw PlayListNotFoundException
'addSongActivity --> apiGateway: propagate PlaylistNotFoundException
'apiGateway --> client: return 400 response
'else else continue
'end
'
'dynamoDB --> playlistDao: return playlist data
'deactivate dynamoDB
'
'playlistDao --> addSongActivity : return PlayList object
'deactivate playlistDao
'
'addSongActivity -> albumTrackDao : getAlbumTrack(asin, trackNumber)
'activate albumTrackDao
'
'albumTrackDao -> dynamoDB : lookup by asin, track_number
'activate dynamoDB
'
'alt if song does not exist
'dynamoDB --> albumTrackDao: return with no album_track data
'albumTrackDao --> addSongActivity : throw AlbumTrackNotFoundException
'addSongActivity --> apiGateway: propagate AlbumTrackNotFoundException
'apiGateway --> client : return 400 response
'else else continue
'end
'
'dynamoDB --> albumTrackDao: return with album_track data
'deactivate dynamoDB
'
'albumTrackDao --> addSongActivity : return AlbumTrack object
'deactivate albumTrackDao
'
'alt if request.queueNext is provided and true
'addSongActivity -> addSongActivity: add song to front of playlist
'
'else else
'addSongActivity -> addSongActivity: add song to back of playlist
'end
'
'addSongActivity -> addSongActivity: update playlist song count
'
'addSongActivity -> playlistDao : savePlaylist(Playlist)
'activate playlistDao
'
'playlistDao -> dynamoDB : store Playlist
'activate dynamoDB
'
'dynamoDB --> playlistDao : return 200 response
'deactivate dynamoDB
'
'playlistDao --> addSongActivity : return updated Playlist object
'deactivate playlistDao
'
'loop for each song in playlist
'addSongActivity -> addSongActivity: Create SongModel
'addSongActivity -> addSongActivity: SetSongModel fields with AlbumTrack data
'addSongActivity -> addSongActivity: store SongModel in list
'end
'
'addSongActivity -> addSongActivity: Create AddSongToPlaylistResult and set SongModel list
'
'addSongActivity --> apiGateway : return AddSongToPlaylistResult
'deactivate addSongActivity
'
'apiGateway --> client : return 200 response with AddSongToPlaylistResult data
'deactivate apiGateway

@enduml
